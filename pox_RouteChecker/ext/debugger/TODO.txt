1. Как узнать, где пакет вошел в сеть?
1.1. Вход отличается тем, что на него приходят пакеты не от одного из наших свичей...
1.2. Discovery
1.3. Пока только перехват пользовательских. Запилить самостоятельную генерацию LLDP.

2. В сети может быть цикл и пакеты могут размножаться. Тогда (1) не работает.

3. Модификация полей пакета при обработке на свиче. Тогда распознавание по матчам не работает, 
если пользовательская программа форсит на контроллер после изменения
 (иначе дебаг-форс вставляется первым, совпадение по матчу сработает).

4. Перекрытие потоков на свиче. На контроллер пользователя будут форситься лишние пакеты, 
даже если есть более приоритетные правила без юзер-форса.

5. Сделать корректную обработку StatsReply.
5.1 Написаны обертки для aggregated flow. Вроде должно работать...

6. Хабы. Невозможно опознать, откуда пришел пакет. Также размножение пакетов.
6.1. Можно не принимать во внимание?

7. Реализовать алгоритм, который стабильно работает на определенном классе графов.
   С определенными данными о трафике.


7.1. Проход по дереву потока.
7.1.1. Условия на топологию: нет
7.1.2. Условия на поток: 
7.1.2.1. Пакет не проходит по линку дважды в одном направлении.
7.1.2.2. Пакет выходит только на один линк "свич-свич"
7.1.2.3.* При объединении всех входов и выходов в одну точку
        Нет двух циклов длины более 2, проходящих через один линк
        в разных направлениях (достаточное. необходимое???)

7.1.2.3.** Поток не проходит через две точки из внутреннего цикла,
        если этот цикл не является висящим (имеет один вход).
        Алгоритм: для каждой точки подграфа из простых путей (вход..проверка)
                  количество входящих пакетов равно количеству выходящих,
                  по данному подграфу.

7.1.3. Необходимые данные: (начало линка, конец линка)


7.2. Проход по поддереву после рассечения потока на подпотоки.
     + см. 7.1.
     Увеличивает применимость.
7.2.(1,2) см. 7.1.
7.2.3. Необходимые данные: (начало линка, конец линка, заголовок)


7.3. Что, если добавить адресацию внутри свича по порту?
7.3.3. Необходимые данные: (начало линка, конец линка, заголовок)
                         + (входной порт, выход. порт)


7.4. Необходимо следить за проходом пакетов в свичах. Попробовать по FlowRemoved
 в предположении, что правила не перекрываются.
7.4.3. Необходимые данные: (начало линка, конец линка, заголовок) 
                         + (входной порт, выход. порт, заголовок)
       Возможна работа с аггрегированными данными.

8. Если контроллер отвечает на PacketIn с зеркалированием на контроллер, 
    то данный PacketIn будет считаться дважды.
8.1. Если мы пересылаем PacketIn, то запоминаем buffer_id и если в течение
    2 секунд будет ответ с этим buffer_id, то информацию о PacketIn стираем.
    Иначе через 2 сек пишем в базу задним временем.


9. Повышение производительности путем задания классов трафика, которые смотрим.
Тогда можно ставить PacketIn только на те FlowMod, которые задал пользователь.

10. Разгрузить IDS, направляя на него только трафик, который проверяется, и контролировать корректность.

11. Самостоятельная работа с LLDP.
11.1 Сделана самостоятельная генерация с отключением при обнаружении пользовательских
     LLDP (не тестировано). Следует организовать отключение сохранения наших LLDP
     в базу данных.
